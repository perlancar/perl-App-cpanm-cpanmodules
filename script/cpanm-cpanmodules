#!perl

# DATE
# VERSION

# FRAGMENT id=shcompgen-hint command=_cpanm-cpanmodules

use strict 'subs', 'vars';
use warnings;

use App::lcpan::Call;

my @new_argv;
for my $arg (@ARGV) {
    # not a module name
    unless ($arg =~ /\A[A-Za-z0-9_]+(::[A-Za-z0-9_]+)*\z/) {
        push @new_argv, $arg;
        next;
    }
    my $mod = $arg =~ /^Acme::CPANModules::/ ? $arg : "Acme::CPANModules::$arg";
    (my $modpm = "$mod.pm") =~ s!::!/!g;
    eval { require $modpm; 1 } or do {
        warn "cpanm-cpanmodules: Can't load $mod, assuming you want to install $mod instead\n";
        push @new_argv, $mod;
        next;
    };
    my $list = ${"$mod\::LIST"};
    unless (ref $list eq 'HASH' && $list->{entries}) {
        warn "cpanm-cpanmodules: Can't get entries from $mod, assuming you want to install $mod instead\n";
        push @new_argv, $mod;
        next;
    }
    my @mods = map { $_->{module} } @{$list->{entries}};
    warn "cpanm-cpanmodules: Replacing $arg with modules listed in $mod: ".join(" ", @mods) if $ENV{DEBUG};
    push @new_argv, @mods;
}

print join(" ", "cpanm", @new_argv), "\n" if $ENV{DEBUG};
system {"cpanm"} "cpanm", @new_argv;

# ABSTRACT: Install all modules that is listed in an Acme::CPANModules:: module
# PODNAME:

=head1 DESCRIPTION

L<cpanm-cpanmodules> is a simplistic wrapper over L<cpanm>. This command:

 % cpanm-cpanmodules -n FooThis

will load L<Acme::CPANModules::FooThis>, get all the entries from it, and
substitute it into the arguments, so the command that gets executed is something
like:

 % cpanm-cpanmodules -n App::HTTPThis App::HTTPSThis App::DAVThis App::FTPThis App::CGIThis

It's basically a convenience shortcut (with tab completion as bonus) for:

 % perl -MAcme::CPANModules::FooThis -E'say $_->{module} for @{ $Acme::CPANModules::FooThis::LIST->{entries} }' | cpanm -n

That's about it.


=head1 SEE ALSO

L<cpanm-task> from L<App::cpanm::task>

=cut
